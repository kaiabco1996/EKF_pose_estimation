%EE5111 AY2023/2024 Semester 1
%CA 1: Multi-Sensor Pose Estimation for Autonomous Vehicles
%Group 8 Simulation Code
%This program simulates our sensor fusion design proposal using a GPS and
%IMU to determine location and pose of a vehicle in a 2D plane. Extended
%Kalman Filter is used to estimate the true states while gaussian noise is
%applied to the true state values to simulate sensor outputs.

%clear all variables first and close all opened windows
clc;
clear all;
close all;

%Set number of states here which will be used for CTRV model.
%x_pos= Position X
%y_pos= Position Y
%yaw_angle= Heading angle
%vel=Velocity at Heading Direction
%yaw_rate= Heading rate
num_states=5;

%Set number of measurements here. In the real world, tracking systems can only
%measure the following through an IMU and GPS:
%states:
%x_pos= Position X
%y_pos= Position Y
%vel=Velocity at Heading Direction
%yaw_rate= Heading rate
num_meas=4;

%Set frequency of EKF measurement here:
T_freq= 50;
%Set frequency of GPS here to simulate variation of device performance:
GPS_freq = 50;

%Sample times for EKF and GPS are set below:
T= 1/T_freq;
T_GPS=1/GPS_freq;
tt = 100; %total simulation time
t =0: T: tt; %Set timestamp array

% Set initial error covariance P0 first:
P0 = 1000*eye(5,5); %We set a large uncertainty first assuming we don't know location of vehicle

%Set Process Noise Covariance Matrix Q
%Assign standard deviation values for each state variable here:
sd_GPS_Q = 0.5*8.8*(T^2); %Assume 8.8 m/s^2 is the max acceleration for the vehicle
sd_yaw_Q = 0.1*T; %Assume 0.1 rad/s as maximum turn rate for the vehicle
sd_velocity_Q = 8.8*T; %Assume 8.8m/s^2 as maximum acceleration of the vehicle
sd_yaw_rate_Q = 1*T; %Assume 1 rad/s^2 as the maximum yaw rate acceleration for the vehicle
%Set Process Noise Covariance Matrix Q below. Each element in the diagonal
%are the variance values obtained by squaring the std dev values
Q = diag([(sd_GPS_Q^2) (sd_GPS_Q^2) (sd_yaw_Q^2) (sd_velocity_Q^2) (sd_yaw_rate_Q^2)]); 

%Set Measurement Noise Covariance Matrix R
%Assign standard deviation values for each measurement here:
sd_GPS_R = 6; %std dev for GPS measurement
%sd_yaw_R = 2; %std dev for yaw measurement
sd_velocity_R = 1; %std dev for velocity measurement
sd_yaw_rate_R = 0.1; %std dev for yaw rate measurement
%Set Measurement Noise Covariance Matrix R below. Each element in the diagonal
%are the variance values obtained by squaring the std dev values
%R = diag([(sd_GPS_R^2) (sd_GPS_R^2) (sd_yaw_R^2) (sd_velocity_R^2) (sd_yaw_rate_R^2)]);
R = diag([(sd_GPS_R^2) (sd_GPS_R^2) (sd_velocity_R^2) (sd_yaw_rate_R^2)]);

%% 
%Read Sensors Raw data from CSV File:
Raw_Data=readmatrix('Sensors Raw Data.csv');
%Divide raw data to different columns and convert to a 1D Array
date=Raw_Data(:,1); date=reshape(date.', 1, []);
time=Raw_Data(:,2); time=reshape(time.', 1, []);
millis=Raw_Data(:,3); millis=reshape(millis.', 1, []);
ax=Raw_Data(:,4); ax=reshape(ax.', 1, []);
ay=Raw_Data(:,5); ay=reshape(ay.', 1, []);
az=Raw_Data(:,6); az=reshape(az.', 1, []);
rollrate=Raw_Data(:,7); rollrate=reshape(rollrate.', 1, []);
pitchrate=Raw_Data(:,8); pitchrate=reshape(pitchrate.', 1, []);
yawrate=Raw_Data(:,9); yawrate=reshape(yawrate.', 1, []);
oll=Raw_Data(:,10); oll=reshape(oll.', 1, []);
pitch=Raw_Data(:,11); pitch=reshape(pitch.', 1, []);
yaw=Raw_Data(:,12); yaw=reshape(yaw.', 1, []);
speed=Raw_Data(:,13); speed=reshape(speed.', 1, []);
course=Raw_Data(:,14); course=reshape(course.', 1, []);
latitude=Raw_Data(:,15); latitude=reshape(latitude.', 1, []);
longitude=Raw_Data(:,16); longitude=reshape(longitude.', 1, []);
altitude=Raw_Data(:,17); altitude=reshape(altitude.', 1, []);
pdop=Raw_Data(:,18); pdop=reshape(pdop.', 1, []);
hdop=Raw_Data(:,19); hdop=reshape(hdop.', 1, []);
vdop=Raw_Data(:,20); vdop=reshape(vdop.', 1, []);
epe=Raw_Data(:,21); epe=reshape(epe.', 1, []);
fix=Raw_Data(:,22); fix=reshape(fix.', 1, []);
satellites_view=Raw_Data(:,23); satellites_view=reshape(satellites_view.', 1, []);
satellites_used=Raw_Data(:,24); satellites_used=reshape(satellites_used.', 1, []);
temp=Raw_Data(:,25); temp=reshape(temp.', 1, []);
%For course (yaw) measurements, an angle of 0 degrees means the vehicle is
%travelling north while 90 degrees means it is travelling east. We need to
%offset the course values so that east direction becomes 0 degrees and
%north becomes 90 degrees.
course = (-course+90); 

%Next, we need to approximate longitude and latitude measurment of GPS to
%meters to check vehicle location
Radius_Earth = 6378388; %This is in meters
arc = 2*pi*(Radius_Earth+altitude)/360; %calculate in meters per degrees
dx = arc.*cos(latitude*(pi/180)).*[0 longitude(2:length(longitude))-longitude(1:length(longitude)-1)]; %We compute the x position in meters here
dy = arc.*[0 latitude(2:length(latitude))-latitude(1:length(latitude)-1)];%We compute the y position in meters here
mx = cumsum(dx); %Cumulative sum is performed so that each succeeding element represents the next x position in meters.
my = cumsum(dy); %Cumulative sum is performed so that each succeeding element represents the next y position in meters.
ds = sqrt(dx.^2+dy.^2); %calculate distance moved from previous location via distance formula
GPS_movement = ds ~= 0; %Flag array which will serve as trigger for EKF to indicate that vehicle has moved for each time step

%Set measurement h matrix
%h=eye(5,5);
h=eye(4,4);

%Set initial value of state variables here:
x = [mx(1); my(1); course(1)*(pi/180); speed(1)/3.6+0.001; yawrate(1)/180*pi];
U= float(cos(x(3)*x(4)));
V= float(cos(x(3)*x(4)));

%Setup measurement matrix here:
sensor_meas= [mx my speed/3.6 yawrate/180*pi];